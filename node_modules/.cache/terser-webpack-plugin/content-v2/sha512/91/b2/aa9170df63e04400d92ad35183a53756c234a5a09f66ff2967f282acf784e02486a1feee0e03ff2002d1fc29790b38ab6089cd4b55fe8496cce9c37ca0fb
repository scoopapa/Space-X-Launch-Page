{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\pccom\\\\SpaceXLaunchWebApp\\\\src\\\\App.js\",\"C:\\\\Users\\\\pccom\\\\SpaceXLaunchWebApp\\\\src\\\\serviceWorker.js\",\"C:\\\\Users\\\\pccom\\\\SpaceXLaunchWebApp\\\\src\\\\index.js\"],\"names\":[\"tableHeader\",\"react_default\",\"a\",\"createElement\",\"width\",\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"data\",\"rows\",\"i\",\"push\",\"App_Row\",\"align\",\"className\",\"border\",\"_this2\",\"fetch\",\"API\",\"then\",\"response\",\"json\",\"setState\",\"React\",\"Component\",\"Row\",\"_this3\",\"mission_name\",\"missionName\",\"date\",\"Date\",\"launch_date_utc\",\"hour\",\"getHours\",\"minutes\",\"getMinutes\",\"toString\",\"length\",\"toDateString\",\"centralDate\",\"rocket\",\"rocket_name\",\"rocketName\",\"second_stage\",\"payloads\",\"payloadData\",\"txt\",\"payload_id\",\"link\",\"cargo_manifest\",\"href\",\"cargo\",\"launch_success\",\"upcoming\",\"launch_failure_details\",\"reason\",\"launchStatus\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\nimport './App.css';\\n\\n\\nlet API = \\\"https://api.spacexdata.com/v3/launches\\\"\\nlet QS = \\\"?sort=flight_number&order=desc&filter=mission_name,launch_date_utc,launch_failure_details/reason,launch_success,upcoming,rocket\\\";\\nlet rowLimit = 125;\\nlet tableHeader = <tr> \\n\\t\\t\\t\\t\\t<th width={300}> Mission </th> \\n\\t\\t\\t\\t\\t<th width={100}> Date </th> \\n\\t\\t\\t\\t\\t<th width={100}> Rocket </th> \\n\\t\\t\\t\\t\\t<th> Payload </th>\\n\\t\\t\\t\\t\\t<th> Launch Status </th>\\n\\t\\t\\t\\t</tr>\\n\\nclass App extends React.Component {\\n\\tconstructor( props ){\\n\\t\\tsuper( props );  \\n\\t\\tthis.state = {\\n\\t\\t\\tdata: []\\n\\t\\t};\\n\\t}\\t\\n\\t\\n\\trender() {\\n\\t\\tconst rows = []\\n\\t\\tfor ( let i = 0; i < rowLimit; i++ ) {\\n\\t\\t\\tif ( this.state.data[i] ) {\\n\\t\\t\\t\\trows.push( <Row data={ this.state.data[i] }/> )\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tif ( !this.state.data[0] ) return \\\"Loading...\\\";\\n\\t\\treturn <div>\\n\\t\\t\\t<h1 align=\\\"center\\\"> SpaceX Launches </h1>\\n\\t\\t\\t<table className=\\\"launchTable\\\" border=\\\"20px\\\" align=\\\"center\\\">\\n\\t\\t\\t\\t{ tableHeader }\\n\\t\\t\\t\\t{ rows }\\n\\t\\t\\t</table>\\n\\t\\t</div>\\n\\t}\\n  \\n\\tcomponentDidMount() {\\n\\t\\tfetch( API + QS )\\n\\t\\t.then(response => response.json())\\n\\t\\t.then(data => this.setState({ data }));\\n\\t}\\n}\\n\\nclass Row extends React.Component {\\n\\tconstructor( props ){\\n\\t\\tsuper( props );  \\n\\t\\tthis.state = {\\n\\t\\t\\tdata: []\\n\\t\\t};\\n\\t}\\n\\t\\n\\trender() {\\n\\t\\tif ( this.props.data ) {\\n\\t\\t\\tconst data = this.props.data\\n\\t\\t\\treturn <tr>\\n\\t\\t\\t\\t\\t\\t<td align=\\\"center\\\"> { missionName( data ) } </td>\\n\\t\\t\\t\\t\\t\\t<td align=\\\"center\\\"> { centralDate( data ) } </td>\\n\\t\\t\\t\\t\\t\\t<td align=\\\"center\\\"> { rocketName( data ) } </td>\\n\\t\\t\\t\\t\\t\\t<td align=\\\"center\\\"> { cargo( data ) } </td>\\n\\t\\t\\t\\t\\t\\t<td align=\\\"center\\\"> { launchStatus( data ) } </td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t}\\n\\t\\treturn \\\"...\\\";\\n\\t}\\n}\\n\\nfunction missionName( data ) {\\n\\treturn data.mission_name\\n}\\n\\nfunction centralDate( data ) {\\n\\tconst date = new Date( data.launch_date_utc );\\n\\tlet hour = date.getHours();\\n\\tlet minutes = date.getMinutes();\\n\\tif ( hour.toString().length === 1 ) hour = '0' + hour;\\n\\tif ( minutes.toString().length === 1 ) minutes = '0' + minutes;\\n\\tlet str = date.toDateString() + ' - ' + hour + ':' + minutes\\n\\treturn str\\n}\\n\\nfunction rocketName( data ) {\\n\\treturn data.rocket.rocket_name\\n}\\n\\nfunction cargo( data ) {\\n\\tif (!data.rocket.second_stage.payloads) return \\\"none\\\";\\n\\tlet payloads = data.rocket.second_stage.payloads\\n\\t\\n\\tlet payloadData = []\\n\\tfor ( const i in payloads ){\\n\\t\\tif ( i > 0 ) payloadData.push( \\\" / \\\" )\\n\\t\\tlet txt = payloads[i].payload_id;\\n\\t\\tlet link = payloads[i].cargo_manifest\\n\\t\\tpayloadData.push( payloads[i].cargo_manifest ? <a href={link}> {txt} </a> : txt )\\n\\t}\\n\\treturn payloadData\\n}\\n\\nfunction launchStatus( data ) {\\n\\tif ( data.launch_success ) return \\\"Successful\\\";\\n\\tif ( data.upcoming ) return \\\"Upcoming\\\";\\n\\tif ( data.launch_failure_details ) {\\n\\t\\tif ( data.launch_failure_details.reason ) return \\\"Failed: \\\" + data.launch_failure_details.reason;\\n\\t\\treturn \\\"Failed\\\"\\n\\t}\\n\\treturn \\\"Launched\\\"\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,a){},15:function(e,t,a){},16:function(e,t,a){\"use strict\";a.r(t);var n=a(0),r=a.n(n),c=a(7),i=a.n(c),o=(a(14),a(1)),l=a(2),u=a(4),s=a(3),h=a(5),d=(a(15),r.a.createElement(\"tr\",null,r.a.createElement(\"th\",{width:300},\" Mission \"),r.a.createElement(\"th\",{width:100},\" Date \"),r.a.createElement(\"th\",{width:100},\" Rocket \"),r.a.createElement(\"th\",null,\" Payload \"),r.a.createElement(\"th\",null,\" Launch Status \"))),m=function(e){function t(e){var a;return Object(o.a)(this,t),(a=Object(u.a)(this,Object(s.a)(t).call(this,e))).state={data:[]},a}return Object(h.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){for(var e=[],t=0;t<125;t++)this.state.data[t]&&e.push(r.a.createElement(f,{data:this.state.data[t]}));return this.state.data[0]?r.a.createElement(\"div\",null,r.a.createElement(\"h1\",{align:\"center\"},\" SpaceX Launches \"),r.a.createElement(\"table\",{className:\"launchTable\",border:\"20px\",align:\"center\"},d,e)):\"Loading...\"}},{key:\"componentDidMount\",value:function(){var e=this;fetch(\"https://api.spacexdata.com/v3/launches?sort=flight_number&order=desc&filter=mission_name,launch_date_utc,launch_failure_details/reason,launch_success,upcoming,rocket\").then(function(e){return e.json()}).then(function(t){return e.setState({data:t})})}}]),t}(r.a.Component),f=function(e){function t(e){var a;return Object(o.a)(this,t),(a=Object(u.a)(this,Object(s.a)(t).call(this,e))).state={data:[]},a}return Object(h.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){if(this.props.data){var e=this.props.data;return r.a.createElement(\"tr\",null,r.a.createElement(\"td\",{align:\"center\"},\" \",function(e){return e.mission_name}(e),\" \"),r.a.createElement(\"td\",{align:\"center\"},\" \",function(e){var t=new Date(e.launch_date_utc),a=t.getHours(),n=t.getMinutes();1===a.toString().length&&(a=\"0\"+a);1===n.toString().length&&(n=\"0\"+n);return t.toDateString()+\" - \"+a+\":\"+n}(e),\" \"),r.a.createElement(\"td\",{align:\"center\"},\" \",function(e){return e.rocket.rocket_name}(e),\" \"),r.a.createElement(\"td\",{align:\"center\"},\" \",function(e){if(!e.rocket.second_stage.payloads)return\"none\";var t=e.rocket.second_stage.payloads,a=[];for(var n in t){n>0&&a.push(\" / \");var c=t[n].payload_id,i=t[n].cargo_manifest;a.push(t[n].cargo_manifest?r.a.createElement(\"a\",{href:i},\" \",c,\" \"):c)}return a}(e),\" \"),r.a.createElement(\"td\",{align:\"center\"},\" \",function(e){if(e.launch_success)return\"Successful\";if(e.upcoming)return\"Upcoming\";if(e.launch_failure_details)return e.launch_failure_details.reason?\"Failed: \"+e.launch_failure_details.reason:\"Failed\";return\"Launched\"}(e),\" \"))}return\"...\"}}]),t}(r.a.Component);var g=m;Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(r.a.createElement(g,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,t,a){e.exports=a(16)}},[[8,1,2]]]);","extractedComments":[]}