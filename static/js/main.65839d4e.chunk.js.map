{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tableHeader","react_default","a","createElement","width","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","initMassRank","rows","i","push","App_Row","setState","massesByFlight","flightData","totalMass","getPayloadMass","payloadMass","flightNum","total_payload_mass","sortedMasses","sort","b","payload_mass_rank","console","log","rankPayloadMasses","align","className","border","_this2","fetch","API","then","response","json","React","Component","Row","_this3","mission_name","missionName","date","Date","launch_date_utc","hour","getHours","minutes","getMinutes","toString","length","toDateString","centralDate","rocket","rocket_name","rocketName","second_stage","payloads","payloadData","txt","payload_id","link","cargo_manifest","href","payload_mass_lbs","payload_mass_kg","cargo","payloadRank","launch_success","upcoming","launch_failure_details","reason","launchStatus","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65839d4e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nlet API = \"https://api.spacexdata.com/v3/launches\"\nlet QS = \"?sort=flight_number&order=desc&filter=mission_name,launch_date_utc,launch_failure_details/reason,launch_success,upcoming,rocket\";\nlet rowLimit = 125;\nlet tableHeader = <tr> \n\t\t\t\t\t<th width={300}> Mission </th> \n\t\t\t\t\t<th width={100}> Date </th> \n\t\t\t\t\t<th width={100}> Rocket </th> \n\t\t\t\t\t<th> Payload </th>\n\t\t\t\t\t<th width={150}> Payload Weight / Rank </th>\n\t\t\t\t\t<th> Launch Status </th>\n\t\t\t\t</tr>\n\nclass App extends React.Component {\n\tconstructor( props ){\n\t\tsuper( props );  \n\t\tthis.state = {\n\t\t\tdata: [],\n\t\t\tinitMassRank: false\n\t\t};\n\t}\t\n\t\n\trender() {\n\t\tconst rows = []\n\t\tfor ( let i = 0; i < rowLimit; i++ ) {\n\t\t\tif ( this.state.data[i] ) {\n\t\t\t\trows.push( <Row data={ this.state.data[i] }/> )\n\t\t\t}\n\t\t};\n\t\tif ( !this.state.data[0] ) return \"Loading...\";\n\t\tif ( !this.state.data[0] ) return \"Loading...\";\n\t\tif ( !this.state.initMassRank ){\n\t\t\tthis.setState( rankPayloadMasses( this.state.data ))\n\t\t\tthis.setState({initMassRank: true})\n\t\t}\n\t\treturn <div>\n\t\t\t<h1 align=\"center\"> SpaceX Launches </h1>\n\t\t\t<table className=\"launchTable\" border=\"20px\" align=\"center\">\n\t\t\t\t{ tableHeader }\n\t\t\t\t{ rows }\n\t\t\t</table>\n\t\t</div>\n\t}\n  \n\tcomponentDidMount() {\n\t\tfetch( API + QS )\n\t\t.then(response => response.json())\n\t\t.then(data => this.setState({ data }));\n\t}\n}\n\nclass Row extends React.Component {\n\tconstructor( props ){\n\t\tsuper( props );  \n\t\tthis.state = {\n\t\t\tdata: []\n\t\t};\n\t}\n\t\n\trender() {\n\t\tif ( this.props.data ) {\n\t\t\tconst data = this.props.data\n\t\t\treturn <tr>\n\t\t\t\t\t\t<td align=\"center\"> { missionName( data ) } </td>\n\t\t\t\t\t\t<td align=\"center\"> { centralDate( data ) } </td>\n\t\t\t\t\t\t<td align=\"center\"> { rocketName( data ) } </td>\n\t\t\t\t\t\t<td align=\"center\"> { cargo( data ) } </td>\n\t\t\t\t\t\t<td align=\"center\"> { payloadRank( data ) } </td>\n\t\t\t\t\t\t<td align=\"center\"> { launchStatus( data ) } </td>\n\t\t\t\t\t</tr>\n\t\t}\n\t\treturn \"...\";\n\t}\n}\n\nfunction missionName( data ) {\n\treturn data.mission_name\n}\n\nfunction centralDate( data ) {\n\tconst date = new Date( data.launch_date_utc );\n\tlet hour = date.getHours();\n\tlet minutes = date.getMinutes();\n\tif ( hour.toString().length === 1 ) hour = '0' + hour;\n\tif ( minutes.toString().length === 1 ) minutes = '0' + minutes;\n\tlet str = date.toDateString() + ' - ' + hour + ':' + minutes\n\treturn str\n}\n\nfunction rocketName( data ) {\n\treturn data.rocket.rocket_name\n}\n\nfunction cargo( data ) {\n\tif (!data.rocket.second_stage.payloads) return \"none\";\n\tlet payloads = data.rocket.second_stage.payloads\n\t\n\tlet payloadData = []\n\tfor ( const i in payloads ){\n\t\tif ( i > 0 ) payloadData.push( \" / \" )\n\t\tlet txt = payloads[i].payload_id;\n\t\tlet link = payloads[i].cargo_manifest\n\t\tpayloadData.push( payloads[i].cargo_manifest ? <a href={link}> {txt} </a> : txt )\n\t\tif ( payloads[i].payload_mass_lbs ) payloadData.push( \" - \" + payloads[i].payload_mass_kg + \"kg\" );\n\t}\n\treturn payloadData\n}\n\nfunction payloadRank( data ) {\n\tif ( data.total_payload_mass === 0 || !data.total_payload_mass ) return \"Unknown\";\n\treturn ( data.total_payload_mass + \"kg / \" + data.payload_mass_rank );\n}\n\nfunction launchStatus( data ) {\n\tif ( data.launch_success ) return \"Successful\";\n\tif ( data.upcoming ) return \"Upcoming\";\n\tif ( data.launch_failure_details ) {\n\t\tif ( data.launch_failure_details.reason ) return \"Failed: \" + data.launch_failure_details.reason;\n\t\treturn \"Failed\"\n\t}\n\treturn \"Launched\"\n}\n\nfunction rankPayloadMasses( data ){\n\tlet massesByFlight = [];\n\tfor ( const i in data ){\n\t\tlet flightData = {}\n\t\tlet totalMass = getPayloadMass( data[i] );\n\t\tflightData.payloadMass = totalMass;\n\t\tflightData.flightNum = i;\n\t\tmassesByFlight.push( flightData )\n\t\t\n\t\tdata[i].total_payload_mass = totalMass;\n\t}\n\tlet sortedMasses = massesByFlight.sort( function( a, b ){\n\t\treturn ( b.payloadMass - a.payloadMass );\n\t})\n\tfor ( const i in sortedMasses ){\n\t\tlet flightNum = sortedMasses[i].flightNum\n\t\tif ( data[ flightNum ] && sortedMasses[i]){\n\t\t\tdata[ flightNum ].payload_mass_rank = i\n\t\t\tdata[ flightNum ].payload_mass_rank++\n\t\t\tconsole.log( \"mass: \" + data[ flightNum ].total_payload_mass + \" rank: \" + data[ flightNum ].payload_mass_rank + \" num: \" + flightNum )\n\t\t}\n\t\t\n\t}\n\treturn data\n}\n\nfunction getPayloadMass( data ) {\n\tif (!data.rocket.second_stage.payloads) return \"none\";\n\tlet payloads = data.rocket.second_stage.payloads;\n\t\n\tlet payloadMass = 0;\n\tfor ( const i in payloads ){\n\t\tif ( payloads[i].payload_mass_kg ) payloadMass += payloads[i].payload_mass_kg;\n\t}\n\tconsole.log( 'returning mass: ' + payloadMass )\n\treturn payloadMass\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}